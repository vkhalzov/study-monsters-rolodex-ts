{"version":3,"sources":["components/search-box/search-box.component.tsx","components/card/card.component.tsx","components/card-list/card-list.component.tsx","models.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","props","className","type","placeholder","placeHolder","onChange","changeHandler","Card","alt","monster","name","src","id","email","CardList","monsters","map","key","Monster","App","state","searchField","loadMonsters","fetch","then","response","json","users","setState","user","handleChange","event","target","value","getFilteredMonsters","bind","this","filter","toLowerCase","includes","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2VAYeA,G,YAJ4C,SAACC,GAAD,OACzD,2BAAOC,UAAU,SAASC,KAAK,SAASC,YAAaH,EAAMI,YAAaC,SAAUL,EAAMM,kBCD7EC,G,MAA2C,SAACP,GAAD,OACtD,yBAAKC,UAAU,kBACb,yBAAKO,IAAKR,EAAMS,QAAQC,KAAMC,IAAG,+BAA0BX,EAAMS,QAAQG,GAAxC,eACjC,4BAAKZ,EAAMS,QAAQC,MACnB,2BAAIV,EAAMS,QAAQI,UCHTC,G,MAAmD,SAACd,GAAD,OAC9D,yBAAKC,UAAU,aACZD,EAAMe,SAASC,KAAI,SAAAP,GAAO,OAAI,kBAAC,EAAD,CAAMQ,IAAKR,EAAQG,GAAIH,QAASA,UCVtDS,EACX,WACSN,EACAF,EACAG,GACN,yBAHMD,KAGP,KAFOF,OAEP,KADOG,SCgEIM,E,kDAjDb,WAAYnB,GAAe,IAAD,8BACxB,cAAMA,IANRoB,MAAe,CACbL,SAAU,GACVM,YAAa,IAGW,EAK1BC,aAAe,WACbC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEb,SAAUY,EAAMX,KAAI,SAACa,GAAD,OAI5B,IAAIX,EAAQW,EAAKjB,GAAIiB,EAAKnB,KAAMmB,EAAKhB,gBAbzB,EAiB1BiB,aAAe,SAACC,GACd,EAAKH,SAAS,CAAEP,YAAaU,EAAMC,OAAOC,SAhB1C,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAFH,E,kEAqBQ,IAAD,EACGC,KAAKhB,MAA/BL,EADuB,EACvBA,SAAUM,EADa,EACbA,YAClB,OAAON,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQC,KAAK4B,cAAcC,SAASlB,EAAYiB,oB,0CAKlFF,KAAKd,iB,+BAIL,OACE,yBAAKrB,UAAU,OACb,gCACE,8DAEF,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAWG,YAAY,kBAAkBE,cAAe8B,KAAKN,eAC7D,kBAAC,EAAD,CAAUf,SAAUqB,KAAKF,yBAE3B,4BAAQjC,UAAU,UAChB,uBAAGuC,KAAK,yDAAR,qB,GAjDQC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3aedec3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./search-box.styles.css\";\n\ninterface SearchBoxProps {\n  placeHolder: string,\n  changeHandler(event: React.ChangeEvent<HTMLInputElement>): void\n}\n\nconst SearchBox: React.FunctionComponent<SearchBoxProps> = (props) => (\n  <input className=\"search\" type=\"search\" placeholder={props.placeHolder} onChange={props.changeHandler} />\n)\n\nexport default SearchBox;\n","import React from \"react\";\nimport { Monster } from \"../../models\";\nimport \"./card.styles.css\";\n\ninterface CardProps {\n  monster: Monster\n}\n\nexport const Card: React.FunctionComponent<CardProps> = (props) => (\n  <div className=\"card-container\">\n    <img alt={props.monster.name} src={`https://robohash.org/${props.monster.id}?set=set2`} />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport { Monster } from \"../../models\";\nimport \"./card-list.styles.css\";\n\ninterface CardListProps {\n  monsters: Monster[]\n}\n\nexport const CardList: React.FunctionComponent<CardListProps> = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}\n  </div>\n)\n","\nexport class Monster {\n  constructor(\n    public id: number,\n    public name: string,\n    public email: string\n  ) {}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Monster } from \"./models\";\n\ninterface Props {}\n\ninterface State {\n  monsters: Monster[],\n  searchField: string\n}\n\nclass App extends Component<Props, State> {\n\n  state: State = {\n    monsters: [],\n    searchField: ''\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.getFilteredMonsters = this.getFilteredMonsters.bind(this);\n  }\n\n  loadMonsters = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ monsters: users.map((user: {\n            id: number;\n            email: string;\n            name: string;\n          }) => new Monster(user.id, user.name, user.email)) })\n      });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  getFilteredMonsters(): Monster[] {\n    const { monsters, searchField } = this.state;\n    return monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n  }\n\n  // Lifecycle. Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n  componentDidMount(): void {\n    this.loadMonsters();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Monsters Rolodex (TypeScript)</h1>\n        </header>\n        <div className=\"content\">\n          <SearchBox placeHolder=\"Search monsters\" changeHandler={this.handleChange} />\n          <CardList monsters={this.getFilteredMonsters()} />\n        </div>\n        <footer className=\"footer\">\n          <a href=\"https://github.com/vkhalzov/study-monsters-rolodex-ts\">Github Repo</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}